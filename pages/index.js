import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {useEffect, useState, useContext} from 'react'

import Banner from '../components/bannerComponent/banner';
import Card from '../components/cardComponent/card';

//custome hook from lib dir
import useTrackLocation from '../hooks/use-track-location';


//import coffeeStoresData from '../data/coffee-stores.json'; //json static data with resturants releted to coffee
import { fetchCoffeeStores } from '../lib/coffee-stores';
import { ACTION_TYPES, StoreContext } from './_app';


export async function getStaticProps(context) { // get static properties is a function that is called when the page is loaded and return the props, so it mean that the page is loaded and the data is ready to be used. Render method is: SSG static side generation.
  //const data = fetch(url) <= we have JSON data in coffeeStores.json, but also we could use API to get data from server
  //console.log("THIS WILL BE PRINTED ONLY AT SERWER SITE BY NODE.JS")
 
  const coffeeStores = await fetchCoffeeStores(); 
  console.log(coffeeStores, 'index.js line 22 coffeeStores') 
  return {
        props: {
            coffeeStores:  coffeeStores, //coffeStores as a key and also as a value
        }, //will be passed to the pge component as props
    }
}


export default function Home(props) {
  // this is hook created in hook directory 
  const { handleTrackLocation,  locationErrorMsg, isFindingLocation } = useTrackLocation()
  //console.log({latLong, locationErrorMsg} )
  //const [coffeeStores, setCoffeeStores] = useState('')
  const [coffeeStoresError, setCoffeeStoresError] = useState(null)

  const { dispatch, state } = useContext(StoreContext)

  const { coffeeStores, latLong } = state

  
  useEffect( () => {
    //self invoke async function
    (async () => {
      if(latLong) {
        try {
          const fetchedCoffeeStores = await fetchCoffeeStores(latLong, 30);
          console.log({fetchedCoffeStores}, 'fetchedCoffeeStores')
          //set coffee stores
          //setCoffeeStores(fetchedCoffeeStores)
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {
              coffeeStores: fetchedCoffeeStores,
            },
          })
        } catch (error) {
         // console.log({error})
         setCoffeeStoresError(error.message)
        }
      }
    })()
  }, [latLong, dispatch])

  const handleOnBannerBtnClick = () => { 
    handleTrackLocation()
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner buttonText={ isFindingLocation ? 'Locating...' : 'View stores nearby'} handleOnClick={handleOnBannerBtnClick}/>
        {locationErrorMsg && <p>Something went wrong {locationErrorMsg}</p>}
        {coffeeStoresError && <p>Error after clicing near me at index.js: {coffeeStoresError}</p>}

        <div className={styles.heroImage}>
        <Image src="/static/hero-image.png" width={500} height={300} alt="Hero image"/>
        </div>

        {coffeeStores.length > 0 &&
       <div className={styles.sectionWrapper}> {/* <> </> <=== satisfied react condition about root element for hmlt */}
          <h2 className={styles.heading2}>Stores near me</h2>
          <div className={styles.cardLayout}>
            {coffeeStores.map((coffeeStore) => {
              return (
                <Card 
                  // className={styles.card}
                  key={coffeeStore.id} 
                  name={coffeeStore.name} 
                  imgUrl={coffeeStore.imgUrl || 'https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80'}
                  href={`/coffee-store/${coffeeStore.id}`}
              />
              )
            })}
          </div>
        </div>  }


       {props.coffeeStores.length > 0 &&
       <div className={styles.sectionWrapper}> {/* <> </> <=== satisfied react condition about root element for hmlt */}
          <h2 className={styles.heading2}>Boxtel stores</h2>
          <div className={styles.cardLayout}>
            {props.coffeeStores.map((coffeeStore) => {
              return (
                <Card 
                  // className={styles.card}
                  key={coffeeStore.id} 
                  name={coffeeStore.name} 
                  imgUrl={coffeeStore.imgUrl || 'https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80'}
                  href={`/coffee-store/${coffeeStore.id}`}
              />
              )
            })}
          </div>
        </div>  }
      </main>
    </div>
  )
}
